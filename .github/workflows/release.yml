name: Release

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      tagAsLatest:
        type: boolean
        description: Tag as latest
        required: true
        default: true

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'

      - name: Add Homebrew to PATH
        run: echo "/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH

      - name: Setup Vault Container
        run: |-
          brew tap hashicorp/tap
          brew install hashicorp/tap/vault

      - name: Build with Gradle
        run: ./gradlew clean build --refresh-dependencies
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Image Details
        id: ci-release-create-outputs
        run: |
          DOCKER_IMAGE=provenanceio/p8e-cee-api
          VERSION=$( echo ${{ github.event.release.tag_name }} | sed -e 's/^v//' )
          TAGS="${DOCKER_IMAGE}:${VERSION}"

          if [ ${{ github.event.inputs.tagAsLatest }} == 'true' ] ; then
            TAGS="${TAGS},${DOCKER_IMAGE}:latest"
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          file: service/docker/Dockerfile
          context: .
          push: true
          tags: ${{ steps.ci-release-create-outputs.outputs.tags }}

      - name: Install gpg secret key
        run: |
          export GPG_TTY=$(tty)
          echo -n "${{ secrets.OSSRH_GPG_SECRET_KEY }}" | base64 --decode | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
          echo -n "${{ secrets.OSSRH_GPG_SECRET_KEY }}" | base64 --decode > $GITHUB_WORKSPACE/release.gpg

      - name: Publish to Maven Central
        run: |
          ./gradlew publishToSonatype -Pversion=${{ steps.ci-release-create-outputs.outputs.version }} $(if [ "${{github.event.release.prerelease}}" = "true" ]; then echo 'closeSonatypeStagingRepository'; else echo 'closeAndReleaseSonatypeStagingRepository'; fi) \
          -Psigning.keyId=B7D30ABE -Psigning.password="${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}" -Psigning.secretKeyRingFile=$GITHUB_WORKSPACE/release.gpg \
          --info
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
